{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antan\\\\Desktop\\\\ReactLearning\\\\TimeToPracticeAcompletePracticeProject\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Header from './Header';\nimport InvestForm from './InvestForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App(props) {\n  _s();\n  const [Data, setYearData] = useState([{\n    currentSavings: \"\",\n    yearlySavings: \"\",\n    expectedReturn: \"\",\n    investmentDuration: \"\"\n  }]);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(InvestForm, {\n      calculate: calculateHandler,\n      yearsData: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UhkHHfJgyASNesIpwPZV/BHldXg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Header","InvestForm","jsxDEV","_jsxDEV","App","props","_s","Data","setYearData","useState","currentSavings","yearlySavings","expectedReturn","investmentDuration","calculateHandler","userInput","yearlyData","yearlyContribution","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","calculate","yearsData","data","_c","$RefreshReg$"],"sources":["C:/Users/antan/Desktop/ReactLearning/TimeToPracticeAcompletePracticeProject/01-starting-project/src/App.js"],"sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport InvestForm from './InvestForm';\n\nfunction App(props) {\n  const [Data, setYearData] = useState([\n    {\n      currentSavings: \"\",\n      yearlySavings: \"\",\n      expectedReturn: \"\",\n      investmentDuration: \"\",\n    },\n  ]);\n  const calculateHandler = (userInput) => {\n    \n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n     <Header></Header>\n     <InvestForm calculate = {calculateHandler} yearsData ={data}></InvestForm>\n     </div> \n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,CACnC;IACEC,cAAc,EAAE,EAAE;IAClBC,aAAa,EAAE,EAAE;IACjBC,cAAc,EAAE,EAAE;IAClBC,kBAAkB,EAAE;EACtB,CAAC,CACF,CAAC;EACF,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IAEtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIN,cAAc,GAAG,CAACK,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAME,kBAAkB,GAAG,CAACF,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMH,cAAc,GAAG,CAACG,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMG,QAAQ,GAAG,CAACH,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGV,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIU,cAAc,GAAGH,kBAAkB;MACrDD,UAAU,CAACK,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEb,cAAc;QAChCO,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEd,OAAA;IAAAqB,QAAA,gBACCrB,OAAA,CAACH,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACjBzB,OAAA,CAACF,UAAU;MAAC4B,SAAS,EAAIf,gBAAiB;MAACgB,SAAS,EAAGC;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEX;AAACtB,EAAA,CA3CQF,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}